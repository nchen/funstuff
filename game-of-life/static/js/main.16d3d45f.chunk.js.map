{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["nextStatus","arr","i","j","countNeighbors","count","d","x","y","getNumberOfNeighbors","selfStatus","rand","seed","Date","getTime","number","Math","ceil","App","row","push","generateEmptyData","useState","data","setData","isRunning","setIsRunning","speed","setSpeed","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","data2","newStatus","className","map","key","toString","cell","type","min","max","step","value","onChange","event","target","onClick","rnd","generateRandomData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16d3d45f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport './_range.scss';\n\nconst size = 25;\nconst LIVE = 1;\nconst DIE = 0;\n\nfunction getNumberOfNeighbors(arr, i, j) {\n  let count = 0;\n\n  const directions = [\n    [-1, -1], [0, -1], [1, -1], [-1, 0], [1, 0], [-1, 1], [0, 1], [1, 1]\n  ];\n\n  for (let d of directions) {\n    let x = i + d[0];\n    let y = j + d[1];\n    if (x >= 0 && x < size && y >= 0 && y < size) {\n      if (arr[x][y] === LIVE) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nfunction nextStatus(arr, i, j) {\n  let countNeighbors = getNumberOfNeighbors(arr, i, j);\n  let selfStatus = arr[i][j];\n  let nextStatus = selfStatus;\n\n  if (selfStatus === LIVE) {\n    if (countNeighbors < 2 || countNeighbors > 3) {\n      nextStatus = DIE;\n    } else if (countNeighbors === 2 || countNeighbors === 3) {\n      nextStatus = LIVE;\n    }\n  } else {\n    if (countNeighbors === 3) {\n      nextStatus = LIVE;\n    }\n  }\n\n  return nextStatus;\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nvar rand = (function(){\n  var today = new Date();\n  var seed = today.getTime();\n  function rnd(){\n    seed = ( seed * 9301 + 49297 ) % 233280;\n    return seed / ( 233280.0 );\n  };\n  return function rand(number){\n    return Math.ceil(rnd(seed) * number);\n  };\n})();\n\nfunction generateEmptyData() {\n  let arr = [];\n  \n  for (let i = 0; i < size; i++) {\n    let row = [];\n    for (let j = 0; j < size; j++) {\n      let rnd = rand(1000);\n      row.push(DIE);\n    }\n    arr.push(row);\n  }\n  return arr;\n}\n\nfunction generateRandomData() {\n  let arr = [];\n  \n  for (let i = 0; i < size; i++) {\n    let row = [];\n    for (let j = 0; j < size; j++) {\n      let rnd = rand(1000);\n      row.push(rnd % 2 === 1? LIVE : DIE);\n    }\n    arr.push(row);\n  }\n  return arr;\n}\n\nfunction App() {\n  let arr = generateEmptyData();\n\n  let [data, setData] = useState(arr);\n  let [isRunning, setIsRunning] = useState(false);\n  let [speed, setSpeed] = useState(3);\n\n  useInterval(() => {\n    let data2 = [];\n    for (let i = 0; i < size; i++) {\n      let row = [];\n      for (let j = 0; j < size; j++) {\n        let newStatus = nextStatus(data, i, j);\n        row.push(newStatus);\n      }\n      data2.push(row);\n    }\n    setData(data2);\n  }, isRunning? 200 * (6 - speed) : null);\n\n  return (\n    <div className=\"App\">\n      <h1>生命进化游戏</h1>\n      <div className=\"grid\">\n        { \n          data.map((row, i) =>\n            <div className=\"row\" key={'row_' + i.toString()}>\n            {\n              row.map((cell, j) =>\n                <div key={'cell_' + i.toString() + '_' + j.toString()}\n                  className={ 'cell ' + (cell === DIE ? 'die' : 'live') }>\n                </div>\n              )\n            }\n            </div>\n          )\n        }\n      </div>\n      <div className=\"toolbar\">\n        <label>速度：</label><input type=\"range\" min=\"1\" max=\"5\" step=\"1\" value={ speed } \n          onChange={\n            (event) => {\n              setSpeed(event.target.value)\n            }\n          }></input>\n        <label>{ speed }</label>\n      </div>\n      <div className=\"toolbar\">\n        <button onClick={ \n            () => { \n              setData(generateRandomData());\n              setIsRunning(true);\n            }\n          }>开始</button>\n          <button onClick={ () => setIsRunning(!isRunning) }>\n            {\n              isRunning ? '暂停' : '继续'\n            }\n          </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}